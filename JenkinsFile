pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'
        DOCKER_RETRIES = 3
        SSH_RETRIES = 3
        PUTTY_PATH = 'C:\\Program Files\\PuTTY'  // Verify this path matches your installation
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Verify Environment') {
            steps {
                script {
                    bat """
                        echo Checking PuTTY tools in: %PUTTY_PATH%
                        dir "%PUTTY_PATH%"
                        if not exist "%PUTTY_PATH%\\plink.exe" (
                            echo Fatal Error: plink.exe not found
                            exit /b 1
                        )
                        if not exist "%PUTTY_PATH%\\pscp.exe" (
                            echo Fatal Error: pscp.exe not found
                            exit /b 1
                        )
                    """
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend || exit /b 1
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend || exit /b 1
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    script {
                        retry(count: env.DOCKER_RETRIES.toInteger(), backoff: [factor: 2, delay: 30, max: 300]) {
                            bat """
                                docker login -u %DOCKER_USER% -p %DOCKER_PWD% || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || exit 1
                            """
                        }
                    }
                }
            }
        }

        stage('Setup SSH Key') {
            steps {
                withCredentials([file(credentialsId: 'ec2-ssh-key-ppk', variable: 'SSH_KEY_PATH')]) {
                    bat """
                        :: Bypass Pageant and use key directly
                        copy "%SSH_KEY_PATH%" id_rsa.ppk
                        icacls id_rsa.ppk /inheritance:r /grant:r "%USERNAME%":"(R)"
                    """
                }
            }
        }

        stage('Test SSH Connection') {
            steps {
                retry(count: env.SSH_RETRIES.toInteger()) {
                    bat """
                        "${PUTTY_PATH}\\plink.exe" -batch -ssh ubuntu@%EC2_IP% -P 22 echo "SSH Connection Verified" || exit 1
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    // Create docker-compose.yml with proper Windows line endings
                    writeFile file: 'docker-compose.yml', text: """|-
                        version: '3'
                        services:
                          frontend:
                            image: ${env.DOCKER_HUB_CREDS_USR}/recipe-frontend:latest
                            ports:
                              - "80:80"
                            depends_on:
                              - backend
                            restart: unless-stopped
                          backend:
                            image: ${env.DOCKER_HUB_CREDS_USR}/recipe-backend:latest
                            ports:
                              - "5000:5000"
                            env_file:
                              - ./Backend/.env
                            restart: unless-stopped
                    """.stripIndent()

                    // Copy compose file using pscp
                    bat """
                        "${PUTTY_PATH}\\pscp.exe" -scp -batch -q -P 22 docker-compose.yml ubuntu@%EC2_IP%:/home/ubuntu/recipe-app/
                    """

                    // Execute deployment commands
                    bat """
                        "${PUTTY_PATH}\\plink.exe" -batch -ssh ubuntu@%EC2_IP% -P 22 "
                            cd /home/ubuntu/recipe-app
                            docker-compose down --remove-orphans
                            docker-compose pull --quiet
                            docker-compose up -d --force-recreate
                            docker system prune -af
                        "
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                retry(3) {
                    bat """
                        curl -sSf http://%EC2_IP%/health-check --connect-timeout 30 || exit 1
                        curl -sSf http://%EC2_IP%/api/status --connect-timeout 30 || exit 1
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    // Remove temporary files
                    bat """
                        docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% 2> nul || echo.
                        docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% 2> nul || echo.
                        del /q docker-compose.yml 2> nul
                    """
                    
                    // Kill Pageant process
                    bat """
                        taskkill /IM pageant.exe /F 2> nul
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean up credentials
            bat """
                docker logout 2> nul
                del /q id_rsa.ppk 2> nul
            """
        }
        success {
            slackSend channel: '#deployments', 
                     message: "SUCCESS: Recipe App ${BUILD_NUMBER} deployed to ${EC2_IP}"
        }
        failure {
            slackSend channel: '#deployments',
                     message: "FAILURE: Recipe App ${BUILD_NUMBER} failed to deploy (Build URL: ${BUILD_URL})"
        }
    }
}
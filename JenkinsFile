pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'
        DOCKER_RETRIES = 3
        SSH_RETRIES = 3
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend || exit /b 1
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend || exit /b 1
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    script {
                        // Retryable login and push with backoff
                        retry(count: env.DOCKER_RETRIES.toInteger(), backoff: [factor: 2, delay: 30, max: 300]) {
                            bat """
                                docker login -u %DOCKER_USER% -p %DOCKER_PWD% || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || exit 1
                            """
                        }
                    }
                }
            }
        }

        stage('Setup PuTTY SSH Key') {
            steps {
                withCredentials([file(credentialsId: 'ec2-ppk-key', variable: 'SSH_KEY_PATH')]) {
                    bat 'copy %SSH_KEY_PATH% test-key.ppk'
                }
            }
        }

        stage('Test SSH with PuTTY') {
            steps {
                bat 'plink -i test-key.ppk -batch -v ubuntu@%EC2_IP% "echo SSH CONNECTION SUCCESSFUL"'
            }
        }

        stage('Deploy to EC2 with PuTTY') {
            steps {
                script {
                    // Create file locally first
                    writeFile file: 'docker-compose.yml', text: """version: '3'
        services:
        frontend:
            image: ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest
            ports:
            - '80:80'
            depends_on:
            - backend
            restart: always

        backend:
            image: ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest
            ports:
            - '5000:5000'
            env_file:
            - ./Backend/.env
            restart: always"""
                    
                    // Copy file to server
                    bat 'pscp -i test-key.ppk -batch docker-compose.yml ubuntu@%EC2_IP%:/home/ubuntu/recipe-app/'
                    
                    // Execute commands
                    bat '''
                        plink -i test-key.ppk -batch ubuntu@%EC2_IP% "
                            cd /home/ubuntu/recipe-app
                            docker pull %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                            docker pull %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                            docker-compose down
                            docker-compose up -d
                        "
                    '''
                }
            }
        }


        stage('Run Tests') {
            steps {
                script {
                    bat """
                        curl -sSf http://%EC2_IP%/health-check > nul || exit 1
                        curl -sSf http://%EC2_IP%/api/status > nul || exit 1
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                bat """
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% 2> nul || echo.
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% 2> nul || echo.
                    del /q test-key.pem 2> nul
                """
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful! ✅'
            slackSend channel: '#deployments', 
                     message: "SUCCESS: Recipe App ${BUILD_NUMBER} deployed to ${EC2_IP}"
        }
        failure {
            echo 'Deployment failed! ❌'
            slackSend channel: '#deployments',
                     message: "FAILURE: Recipe App ${BUILD_NUMBER} failed to deploy"
            script {
                bat """
                    docker logout
                    del /q test-key.pem 2> nul
                """
            }
        }
    }
}
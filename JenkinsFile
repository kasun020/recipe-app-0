pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '18.207.113.212'
        GIT_BRANCH = 'main'
        DOCKER_RETRIES = 3
        SSH_RETRIES = 3
        PUTTY_PATH = 'C:\\Program Files\\PuTTY'  // Verify this path matches your installation
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Verify Environment') {
            steps {
                script {
                    bat """
                        echo Checking PuTTY tools in: %PUTTY_PATH%
                        dir "%PUTTY_PATH%"
                        if not exist "%PUTTY_PATH%\\plink.exe" (
                            echo Fatal Error: plink.exe not found
                            exit /b 1
                        )
                        if not exist "%PUTTY_PATH%\\pscp.exe" (
                            echo Fatal Error: pscp.exe not found
                            exit /b 1
                        )
                    """
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app-0.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend || exit /b 1
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend || exit /b 1
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    script {
                        retry(count: env.DOCKER_RETRIES.toInteger(), backoff: [factor: 2, delay: 30, max: 300]) {
                            bat """
                                docker login -u %DOCKER_USER% -p %DOCKER_PWD% || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || exit 1
                            """
                        }
                    }
                }
            }
        }

stage('Setup and Test SSH') {
    steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key-ppk', keyFileVariable: 'SSH_KEY_PATH')]) {
            // Create a temporary directory with proper permissions
            bat """
                echo Setting up secure directory for SSH key
                mkdir ssh_temp 2>nul
                
                :: Copy the key to the secure location
                copy "%SSH_KEY_PATH%" ssh_temp\\id_rsa
                
                :: Set very restrictive permissions using icacls (modern tool)
                :: First remove all existing permissions
                icacls ssh_temp\\id_rsa /inheritance:r
                icacls ssh_temp\\id_rsa /remove:g "BUILTIN\\Users"
                icacls ssh_temp\\id_rsa /remove:g "Everyone"
                icacls ssh_temp\\id_rsa /remove:g "Authenticated Users"
                
                :: Grant only necessary permissions - use SYSTEM which is the service account for Jenkins
                icacls ssh_temp\\id_rsa /grant:r "SYSTEM:(R)"
                
                :: Verify final permissions
                icacls ssh_temp\\id_rsa
                
                :: Test connection using simpler command
                echo Testing SSH connection...
                
                :: Try using the SSH_ASKPASS environment variable to avoid permission checks
                SET SSH_ASKPASS=nul
                
                :: Try alternative SSH options for Windows
                ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i ssh_temp\\id_rsa ubuntu@%EC2_IP% echo "SSH CONNECTION SUCCESSFUL"
                
                if errorlevel 1 (
                    echo SSH connection failed with OpenSSH
                    
                    :: As a fallback, try using PuTTY if SSH fails
                    echo Falling back to PuTTY...
                    :: Use -hostkey parameter to specify the known fingerprint
                    "%PUTTY_PATH%\\plink.exe" -batch -i "%SSH_KEY_PATH%" -hostkey "SHA256:n8bxB+8FwP54pCnsK13FKPyQOa7LrYzewD/uZyjgcWI" -ssh ubuntu@%EC2_IP% "echo SSH CONNECTION SUCCESSFUL"
                    
                    if errorlevel 1 (
                        echo Both SSH and PuTTY connection methods failed
                        exit /b 1
                    )
                )
                
                echo SSH connection successful!
            """
        }
    }
}

stage('Deploy to EC2') {
    steps {
        script {
            // Create compose file
            writeFile file: 'docker-compose.yml', text: """version: '3'
    services:
    frontend:
        image: ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest
        ports:
        - "80:80"
        depends_on:
        - backend
        restart: unless-stopped
    backend:
        image: ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest
        ports:
        - "5000:5000"
        env_file:
        - ./Backend/.env
        restart: unless-stopped"""
            
            // Use OpenSSH which worked in the previous stage
            withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key-ppk', keyFileVariable: 'SSH_KEY_PATH')]) {
                bat """
                    :: Use OpenSSH which worked in the test stage
                    echo Using OpenSSH for deployment
                    
                    :: Copy the key to the secure location if not already there
                    if not exist ssh_temp\\id_rsa (
                        mkdir ssh_temp 2>nul
                        copy "%SSH_KEY_PATH%" ssh_temp\\id_rsa
                        icacls ssh_temp\\id_rsa /inheritance:r
                        icacls ssh_temp\\id_rsa /remove:g "BUILTIN\\Users"
                        icacls ssh_temp\\id_rsa /remove:g "Everyone"
                        icacls ssh_temp\\id_rsa /remove:g "Authenticated Users"
                        icacls ssh_temp\\id_rsa /grant:r "SYSTEM:(R)"
                    )
                    
                    :: Create directory on remote server
                    ssh -o StrictHostKeyChecking=no -i ssh_temp\\id_rsa ubuntu@%EC2_IP% "mkdir -p /home/ubuntu/recipe-app"
                    
                    :: Transfer docker-compose file
                    scp -o StrictHostKeyChecking=no -i ssh_temp\\id_rsa docker-compose.yml ubuntu@%EC2_IP%:/home/ubuntu/recipe-app/
                    
                    :: Install docker-compose if not already installed
                    ssh -o StrictHostKeyChecking=no -i ssh_temp\\id_rsa ubuntu@%EC2_IP% "if ! command -v docker-compose &> /dev/null; then echo 'Installing docker-compose...'; sudo apt-get update && sudo apt-get install -y docker-compose-plugin docker-compose; fi"
                    
                    :: Deploy using docker-compose - try both standalone and plugin versions
                    ssh -o StrictHostKeyChecking=no -i ssh_temp\\id_rsa ubuntu@%EC2_IP% "cd /home/ubuntu/recipe-app && (docker-compose pull && docker-compose up -d || docker compose pull && docker compose up -d)"
                """
            }
        }
    }
}

        stage('Verify Deployment') {
            steps {
                retry(3) {
                    bat """
                        curl -sSf http://%EC2_IP%/health-check --connect-timeout 30 || exit 1
                        curl -sSf http://%EC2_IP%/api/status --connect-timeout 30 || exit 1
                    """
                }
            }
        }
        
        stage('Cleanup') {
    steps {
        script {
            // Remove temporary files
            bat """
                docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% 2> nul || echo.
                docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% 2> nul || echo.
                del /q docker-compose.yml 2> nul
                
                :: Remove SSH directory
                rd /s /q ssh_temp 2> nul || echo.
            """
            
            // Kill any remaining processes
            bat """
                taskkill /IM ssh.exe /F 2> nul || echo.
                taskkill /IM pageant.exe /F 2> nul || echo.
            """
        }
    }
}
    }
    
    post {
        always {
            // Clean up credentials
            bat """
                docker logout 2> nul
                rd /s /q ssh_temp 2> nul || echo.
            """
        }
        success {
            script {
                try {
                    slackSend channel: '#deployments', 
                             message: "SUCCESS: Recipe App ${BUILD_NUMBER} deployed to ${EC2_IP}"
                } catch (Exception e) {
                    echo "Slack notification failed (plugin might not be installed): ${e.message}"
                    echo "SUCCESS: Recipe App ${BUILD_NUMBER} deployed to ${EC2_IP}"
                }
            }
        }
        failure {
            script {
                try {
                    slackSend channel: '#deployments',
                             message: "FAILURE: Recipe App ${BUILD_NUMBER} failed to deploy (Build URL: ${BUILD_URL})"
                } catch (Exception e) {
                    echo "Slack notification failed (plugin might not be installed): ${e.message}"
                    echo "FAILURE: Recipe App ${BUILD_NUMBER} failed to deploy (Build URL: ${BUILD_URL})"
                }
            }
        }
    }
}
pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '18.207.113.212'
        GIT_BRANCH = 'main'
        DOCKER_RETRIES = 3
        SSH_RETRIES = 3
        PUTTY_PATH = 'C:\\Program Files\\PuTTY'  // Verify this path matches your installation
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Verify Environment') {
            steps {
                script {
                    bat """
                        echo Checking PuTTY tools in: %PUTTY_PATH%
                        dir "%PUTTY_PATH%"
                        if not exist "%PUTTY_PATH%\\plink.exe" (
                            echo Fatal Error: plink.exe not found
                            exit /b 1
                        )
                        if not exist "%PUTTY_PATH%\\pscp.exe" (
                            echo Fatal Error: pscp.exe not found
                            exit /b 1
                        )
                    """
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app-0.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend || exit /b 1
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend || exit /b 1
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    script {
                        retry(count: env.DOCKER_RETRIES.toInteger(), backoff: [factor: 2, delay: 30, max: 300]) {
                            bat """
                                docker login -u %DOCKER_USER% -p %DOCKER_PWD% || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || exit 1
                            """
                        }
                    }
                }
            }
        }

stage('Setup and Test SSH') {
    steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key-ppk', keyFileVariable: 'SSH_KEY_PATH')]) {
            // Use OpenSSH client with proper permissions
            bat """
                echo Copying key from %SSH_KEY_PATH%
                copy "%SSH_KEY_PATH%" test-key.pem
                
                :: Fix permissions - remove inheritance and grant only current user permissions
                icacls test-key.pem /inheritance:r
                icacls test-key.pem /remove:g "BUILTIN\\Users"
                icacls test-key.pem /remove:g "Everyone"
                
                :: Add explicit permission only for Jenkins service account
                icacls test-key.pem /grant:r "%USERNAME%:(R)"
                
                :: Verify permissions
                icacls test-key.pem
                
                :: Test SSH connection with retry
                set ATTEMPTS=0
                :RETRY_SSH
                ssh -v -o StrictHostKeyChecking=no -o BatchMode=yes -i test-key.pem ubuntu@%EC2_IP% echo "SSH CONNECTION SUCCESSFUL"
                if errorlevel 1 (
                    set /a ATTEMPTS+=1
                    if !ATTEMPTS! lss 3 (
                        echo Retrying SSH connection attempt !ATTEMPTS! of 3...
                        ping -n 6 127.0.0.1 > nul
                        goto RETRY_SSH
                    ) else (
                        echo SSH connection failed after 3 attempts
                        exit /b 1
                    )
                )
            """
        }
    }
}

stage('Deploy to EC2') {
    steps {
        script {
            // Create compose file
            writeFile file: 'docker-compose.yml', text: """version: '3'
    services:
    frontend:
        image: ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest
        ports:
        - "80:80"
        depends_on:
        - backend
        restart: unless-stopped
    backend:
        image: ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest
        ports:
        - "5000:5000"
        env_file:
        - ./Backend/.env
        restart: unless-stopped"""
            
            // Use OpenSSH with correct permissions
            withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key-ppk', keyFileVariable: 'SSH_KEY_PATH')]) {
                bat """
                    echo Regenerating key for deployment
                    copy "%SSH_KEY_PATH%" test-key.pem
                    
                    :: Fix permissions properly
                    icacls test-key.pem /inheritance:r
                    icacls test-key.pem /remove:g "BUILTIN\\Users"
                    icacls test-key.pem /remove:g "Everyone"
                    icacls test-key.pem /grant:r "%USERNAME%:(R)"
                    
                    :: First create directory structure if needed
                    ssh -o StrictHostKeyChecking=no -i test-key.pem ubuntu@%EC2_IP% "mkdir -p /home/ubuntu/recipe-app"
                    
                    :: Transfer and execute commands
                    scp -o StrictHostKeyChecking=no -i test-key.pem docker-compose.yml ubuntu@%EC2_IP%:/home/ubuntu/recipe-app/
                    ssh -o StrictHostKeyChecking=no -i test-key.pem ubuntu@%EC2_IP% "cd /home/ubuntu/recipe-app && docker-compose pull && docker-compose up -d"
                """
            }
        }
    }
}

        stage('Verify Deployment') {
            steps {
                retry(3) {
                    bat """
                        curl -sSf http://%EC2_IP%/health-check --connect-timeout 30 || exit 1
                        curl -sSf http://%EC2_IP%/api/status --connect-timeout 30 || exit 1
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    // Remove temporary files
                    bat """
                        docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% 2> nul || echo.
                        docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% 2> nul || echo.
                        del /q docker-compose.yml 2> nul
                    """
                    
                    // Kill Pageant process
                    bat """
                        taskkill /IM pageant.exe /F 2> nul
                    """
                }
            }
        }
    }
    
    post {
        always {
       // Clean up credentials
       bat """
           docker logout 2> nul
           del /q key.ppk openssh.key test-key.pem 2> nul
       """
    }
        success {
            slackSend channel: '#deployments', 
                     message: "SUCCESS: Recipe App ${BUILD_NUMBER} deployed to ${EC2_IP}"
        }
        failure {
            slackSend channel: '#deployments',
                     message: "FAILURE: Recipe App ${BUILD_NUMBER} failed to deploy (Build URL: ${BUILD_URL})"
        }
    }
}
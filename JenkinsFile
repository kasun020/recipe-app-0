pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_SSH_KEY = credentials('ec2-ssh-key')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'  // Set your target branch here
    }
    
    triggers {
        // Poll SCM every 5 minutes for changes
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout the specific branch
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',  // Add your GitHub credentials in Jenkins
                        url: 'https://github.com/kasun020/recipe-app.git'  // Replace with your repo URL
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                // Build the Docker images with a unique tag (build number)
                sh 'docker build -t ${DOCKER_HUB_CREDS_USR}/recipe-backend:${BUILD_NUMBER} ./Backend'
                sh 'docker build -t ${DOCKER_HUB_CREDS_USR}/recipe-frontend:${BUILD_NUMBER} ./frontend'
                
                // Also tag as latest
                sh 'docker tag ${DOCKER_HUB_CREDS_USR}/recipe-backend:${BUILD_NUMBER} ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest'
                sh 'docker tag ${DOCKER_HUB_CREDS_USR}/recipe-frontend:${BUILD_NUMBER} ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest'
            }
        }
        
        stage('Push Images') {
            steps {
                // Login to Docker Hub
                sh 'echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin'
                
                // Push both version-tagged and latest images
                sh 'docker push ${DOCKER_HUB_CREDS_USR}/recipe-backend:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_HUB_CREDS_USR}/recipe-frontend:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest'
                sh 'docker push ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest'
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                // Create docker-compose.yml file for deployment
                sh '''
                cat > docker-compose.yml << EOF
version: '3'

services:
  frontend:
    image: ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always

  backend:
    image: ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest
    ports:
      - "5000:5000"
    env_file:
      - ./Backend/.env
    restart: always
EOF
                '''
                
                // Copy docker-compose file to EC2 and deploy
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'KEY_FILE')]) {
                    sh '''
                    scp -i $KEY_FILE -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${EC2_IP}:/home/ubuntu/recipe-app/
                    ssh -i $KEY_FILE -o StrictHostKeyChecking=no ubuntu@${EC2_IP} "cd /home/ubuntu/recipe-app && docker-compose pull && docker-compose up -d"
                    '''
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                // Remove local Docker images to save space
                sh 'docker rmi ${DOCKER_HUB_CREDS_USR}/recipe-backend:${BUILD_NUMBER} || true'
                sh 'docker rmi ${DOCKER_HUB_CREDS_USR}/recipe-frontend:${BUILD_NUMBER} || true'
                sh 'docker rmi ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest || true'
                sh 'docker rmi ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest || true'
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
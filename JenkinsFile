pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    bat "docker login -u %DOCKER_USER% -p %DOCKER_PWD%"
                    
                    bat """
                        docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                        docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                    """
                }
            }
        }

        stage('Test SSH Connection') {
            steps {
                // More verbosity with detailed output
                sshagent(['ec2-ssh-key']) {
                    bat "ssh -vvv -o StrictHostKeyChecking=no ubuntu@${EC2_IP} \"echo SSH CONNECTION SUCCESSFUL\""
                }
            }
        }

        
        stage('Deploy to EC2') {
            steps {
                script {
                    // Fix indentation in docker-compose.yml
                    writeFile(file: 'docker-compose.yml', text: """version: '3'
services:
  frontend:
    image: ${DOCKER_HUB_CREDS_USR}/recipe-frontend:latest
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always

  backend:
    image: ${DOCKER_HUB_CREDS_USR}/recipe-backend:latest
    ports:
      - "5000:5000"
    env_file:
      - ./Backend/.env
    restart: always
""")
                    echo "Docker compose file created successfully"
                }
                
                // Original deployment with better error handling
                sshagent(['ec2-ssh-key']) {
                    script {
                        def scpStatus = bat(script: "scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@%EC2_IP%:/home/ubuntu/recipe-app/", returnStatus: true)
                        if (scpStatus != 0) {
                            error("SCP file transfer failed with status code ${scpStatus}")
                        }
                        
                        def sshStatus = bat(script: "ssh -o StrictHostKeyChecking=no ubuntu@%EC2_IP% \"cd /home/ubuntu/recipe-app && docker-compose pull && docker-compose down && docker-compose up -d\"", returnStatus: true)
                        if (sshStatus != 0) {
                            error("SSH deployment command failed with status code ${sshStatus}")
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    def testResult = bat(script: 'docker-compose -f docker-compose.yml run frontend npm test', returnStatus: true)
                    if (testResult != 0) {
                        error("Tests failed!")
                    }
                }
            }
        }        
        
        stage('Cleanup') {
            steps {
                bat """
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || echo "Image not found"
                """
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
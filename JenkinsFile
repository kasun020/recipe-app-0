pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
        )]) {
            bat "docker login -u %DOCKER_USER% -p %DOCKER_PWD%"
            
            bat """
                docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
            """
                }
            }
        }
        
        
        stage('Deploy to EC2') {
            steps {
                script {
                    // Create docker-compose.yml
                    writeFile(file: 'docker-compose.yml', text: "...")
                    
                    // Create temporary key file with PowerShell
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        powershell """
                            \$keyContent = Get-Content "${env.SSH_KEY}"
                            Set-Content -Path "temp_key.pem" -Value \$keyContent
                            \$acl = Get-Acl "temp_key.pem"
                            \$acl.SetAccessRuleProtection(\$true, \$false)
                            \$owner = New-Object System.Security.Principal.NTAccount("${env.USERNAME}")
                            \$acl.SetOwner(\$owner)
                            \$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("\${env.USERNAME}","FullControl","Allow")
                            \$acl.AddAccessRule(\$accessRule)
                            Set-Acl "temp_key.pem" \$acl
                            
                            # Run SSH commands
                            scp -i temp_key.pem -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${env.EC2_IP}:/home/ubuntu/recipe-app/
                            ssh -i temp_key.pem -o StrictHostKeyChecking=no ubuntu@${env.EC2_IP} "cd /home/ubuntu/recipe-app && docker-compose pull && docker-compose down && docker-compose up -d"
                            
                            # Clean up
                            Remove-Item temp_key.pem
                        """
                    }
                }
            }
        }


        stage('Run Tests') {
            steps {
                script {
                    def testResult = bat(script: 'docker-compose -f docker-compose.yml run frontend npm test', returnStatus: true)
                    if (testResult != 0) {
                        error("Tests failed!")
                    }
                }
            }
        }        
        stage('Cleanup') {
            steps {
                bat """
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || echo "Image not found"
                """
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
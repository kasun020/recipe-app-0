pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    bat "docker login -u %DOCKER_USER% -p %DOCKER_PWD%"
                    
                    bat """
                        docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                        docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                    """
                }
            }
        }

        stage('Setup SSH Key') {
            steps {
                withCredentials([file(credentialsId: 'ec2-ssh-key', variable: 'SSH_KEY_PATH')]) {
                    // Copy key with better permissions
                    bat 'copy %SSH_KEY_PATH% test-key.pem'
                    
                    // Set more restrictive but effective permissions
                    powershell '''
                        $acl = Get-Acl test-key.pem
                        $acl.SetAccessRuleProtection($true, $false)
                        $acl.Access | ForEach-Object { $acl.RemoveAccessRule($_) }
                        $user = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
                        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($user, "Read", "Allow")
                        $acl.AddAccessRule($accessRule)
                        Set-Acl test-key.pem $acl
                    '''
                }
            }
        }

        stage('Test SSH Connection') {
            steps {
                // Use direct SSH key file instead of sshagent
                bat 'ssh -v -o StrictHostKeyChecking=no -i test-key.pem ubuntu@%EC2_IP% "echo SSH CONNECTION SUCCESSFUL"'
            }
        }

        
        stage('Deploy to EC2') {
            steps {
                script {
                    // Create docker-compose directly on EC2
                    bat """
                        ssh -o StrictHostKeyChecking=no -i test-key.pem ubuntu@%EC2_IP% "cat > /home/ubuntu/recipe-app/docker-compose.yml << 'EOL'
version: '3'
services:
  frontend:
    image: %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
    ports:
      - '80:80'
    depends_on:
      - backend
    restart: always

  backend:
    image: %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
    ports:
      - '5000:5000'
    env_file:
      - ./Backend/.env
    restart: always
EOL"
                    """

                    // SSH into EC2 and deploy
                    bat """
                        ssh -o StrictHostKeyChecking=no -i test-key.pem ubuntu@%EC2_IP% "
                            cd /home/ubuntu/recipe-app
                            
                            # Pull the new images
                            docker pull %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                            docker pull %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                            
                            # Stop any running containers and start new ones
                            docker-compose down
                            docker-compose up -d
                        "
                    """
                }
            }
        }                    


        
        stage('Run Tests') {
            steps {
                script {
                    def testResult = bat(script: 'docker-compose -f docker-compose.yml run frontend npm test', returnStatus: true)
                    if (testResult != 0) {
                        error("Tests failed!")
                    }
                }
            }
        }        
        
        stage('Cleanup') {
            steps {
                bat """
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || echo "Image not found"
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || echo "Image not found"
                """
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
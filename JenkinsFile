pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        EC2_IP = '44.201.228.69'
        GIT_BRANCH = 'main'
        DOCKER_RETRIES = 3
        SSH_RETRIES = 3
    }
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/kasun020/recipe-app.git'
                    ]]
                ])
            }
        }
        
        stage('Build Images') {
            steps {
                bat """
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% ./Backend || exit /b 1
                    docker build -t %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% ./frontend || exit /b 1
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
                    docker tag %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
                """
            }
        }
        
        stage('Push Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-credentials',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PWD'
                )]) {
                    script {
                        // Retryable login and push with backoff
                        retry(count: env.DOCKER_RETRIES.toInteger(), backoff: [factor: 2, delay: 30, max: 300]) {
                            bat """
                                docker login -u %DOCKER_USER% -p %DOCKER_PWD% || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-backend:latest || exit 1
                                docker push %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest || exit 1
                            """
                        }
                    }
                }
            }
        }

        stage('Setup SSH Key') {
            steps {
                withCredentials([file(credentialsId: 'ec2-ssh-key', variable: 'SSH_KEY_PATH')]) {
                    bat 'copy %SSH_KEY_PATH% test-key.pem'
                    powershell '''
                        $keyPath = "test-key.pem"
                        $acl = Get-Acl $keyPath
                        $acl.SetAccessRuleProtection($true, $false)
                        $acl.Access | ForEach-Object { $acl.RemoveAccessRule($_) }
                        $rule = New-Object System.Security.AccessControl.FileSystemAccessRule(
                            [System.Security.Principal.WindowsIdentity]::GetCurrent().Name,
                            "Read",
                            "Allow"
                        )
                        $acl.AddAccessRule($rule)
                        Set-Acl $keyPath $acl
                        icacls $keyPath /inheritance:r /grant:r "$env:USERNAME:(R)"
                    '''
                }
            }
        }

        stage('Test SSH Connection') {
            steps {
                retry(count: env.SSH_RETRIES.toInteger()) {
                    bat """
                        ssh -v -o StrictHostKeyChecking=no -i test-key.pem -o ConnectTimeout=30 ubuntu@%EC2_IP% "
                            echo 'SSH connection validated'
                        " || exit 1
                    """
                }
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                script {
                    // Create docker-compose with proper escaping
                    bat """
                        ssh -i test-key.pem ubuntu@%EC2_IP% "cat > /home/ubuntu/recipe-app/docker-compose.yml" << EOF
version: '3'
services:
  frontend:
    image: %DOCKER_HUB_CREDS_USR%/recipe-frontend:latest
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

  backend:
    image: %DOCKER_HUB_CREDS_USR%/recipe-backend:latest
    ports:
      - "5000:5000"
    env_file:
      - ./Backend/.env
    restart: unless-stopped
EOF
                    """

                    // Atomic deployment with rollback capability
                    bat """
                        ssh -i test-key.pem ubuntu@%EC2_IP% "
                            cd /home/ubuntu/recipe-app
                            docker-compose pull --quiet
                            docker-compose up -d --force-recreate --remove-orphans
                            docker system prune -af
                        " || exit 1
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    bat """
                        curl -sSf http://%EC2_IP%/health-check > nul || exit 1
                        curl -sSf http://%EC2_IP%/api/status > nul || exit 1
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                bat """
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-backend:%BUILD_NUMBER% 2> nul || echo.
                    docker rmi %DOCKER_HUB_CREDS_USR%/recipe-frontend:%BUILD_NUMBER% 2> nul || echo.
                    del /q test-key.pem 2> nul
                """
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful! ✅'
            slackSend channel: '#deployments', 
                     message: "SUCCESS: Recipe App ${BUILD_NUMBER} deployed to ${EC2_IP}"
        }
        failure {
            echo 'Deployment failed! ❌'
            slackSend channel: '#deployments',
                     message: "FAILURE: Recipe App ${BUILD_NUMBER} failed to deploy"
            script {
                bat """
                    docker logout
                    del /q test-key.pem 2> nul
                """
            }
        }
    }
}